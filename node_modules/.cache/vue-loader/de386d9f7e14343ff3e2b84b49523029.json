{"remainingRequest":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\src\\views\\table\\bs-table\\documentManagement\\editDocumentView.vue?vue&type=template&id=2e83cc39&","dependencies":[{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\src\\views\\table\\bs-table\\documentManagement\\editDocumentView.vue","mtime":1659510600124},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658911406787},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1658911433727},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658911406787},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1658911433727}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}