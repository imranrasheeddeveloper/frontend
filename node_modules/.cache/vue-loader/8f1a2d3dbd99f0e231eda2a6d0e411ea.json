{"remainingRequest":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\src\\views\\table\\bs-table\\client\\clientTableView.vue?vue&type=template&id=0871b536&","dependencies":[{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\src\\views\\table\\bs-table\\client\\clientTableView.vue","mtime":1659017882734},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658911406787},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1658911433727},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658911406787},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1658911433727}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cgo8ZGl2PgoKICA8IS0tIHNlYXJjaCBpbnB1dCAtLT4KICA8ZGl2IGNsYXNzPSJjdXN0b20tc2VhcmNoIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiI+CiAgICA8Yi1mb3JtLWdyb3VwPgogICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICA8IS0tIDxsYWJlbCBjbGFzcz0ibXItMSI+U2VhcmNoPC9sYWJlbD4gLS0+CgogICAgICAgIDxiLWlucHV0LWdyb3VwPgogICAgICAgICAgPGItaW5wdXQtZ3JvdXAtcHJlcGVuZD4KICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgdmFyaWFudD0ib3V0bGluZS1wcmltYXJ5IgogICAgICAgICAgICAgIEBjbGljaz0icGFnZT0xLCBnZXRFbXBsb3llZXMoKSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxmZWF0aGVyLWljb24gaWNvbj0iU2VhcmNoSWNvbiIgLz4KICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgIDwvYi1pbnB1dC1ncm91cC1wcmVwZW5kPgogICAgICAgICAgPGItZm9ybS1pbnB1dAogICAgICAgICAgICB2LW1vZGVsPSJzZWFyY2hUZXJtIgogICAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIgogICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICBjbGFzcz0iIGQtaW5saW5lLWJsb2NrIgogICAgICAgICAgICBAa2V5dXA9InNlYXJjaFRpbWVPdXQoKSIKICAgICAgICAgIC8+CiAgICAgICAgICA8IS0tIDxiLWlucHV0LWdyb3VwLWFwcGVuZD4KICAgICAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgICA6dG89InsgbmFtZTogJ2NyZWF0ZS1uZXctY2xpZW50J30iCiAgICAgICAgICAgICAgdi1yaXBwbGUuNDAwPSIncmdiYSgxMTMsIDEwMiwgMjQwLCAwLjE1KSciCiAgICAgICAgICAgICAgdmFyaWFudD0ib3V0bGluZS1wcmltYXJ5Ij4KICAgICAgICAgICAgICAgIEFERCArCiAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgICAgPC9iLWlucHV0LWdyb3VwLWFwcGVuZD4gLS0+CiAgICAgICAgICA8IS0tICAtLT4KICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+CgogICAgICA8L2Rpdj4KICAgIDwvYi1mb3JtLWdyb3VwPgoKICAgIDxiLWZvcm0tZ3JvdXAgdi1pZj0iJGFiaWxpdHkuY2FuKCdhZGQvY29weScsICdjbGllbnQnKSI+CiAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIiPgoKICAgICAgICA8Yi1pbnB1dC1ncm91cD4KCiAgICAgICAgICA8Yi1pbnB1dC1ncm91cC1wcmVwZW5kPgoKICAgICAgICAgICAgPGRpdiBpZD0ibXktY29udGFpbmVyIj4KCiAgICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICBpZD0icG9wb3Zlci1yZWFjdGl2ZS0xIgogICAgICAgICAgICAgICAgcmVmPSJidXR0b24iCiAgICAgICAgICAgICAgICB2LXJpcHBsZS40MDA9IidyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTUpJyIKICAgICAgICAgICAgICAgIHRpdGxlPSJFeHBvcnQiCiAgICAgICAgICAgICAgICB2YXJpYW50PSJvdXRsaW5lLXByaW1hcnkiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGZlYXRoZXItaWNvbiBpY29uPSJEb3dubG9hZEljb24iIC8+CiAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4KCiAgICAgICAgICAgICAgPGItcG9wb3ZlcgogICAgICAgICAgICAgICAgcmVmPSJwb3BvdmVyIgogICAgICAgICAgICAgICAgdGFyZ2V0PSJwb3BvdmVyLXJlYWN0aXZlLTEiCiAgICAgICAgICAgICAgICB0cmlnZ2Vycz0iY2xpY2siCiAgICAgICAgICAgICAgICA6c2hvdy5zeW5jPSJwb3BvdmVyU2hvdyIKICAgICAgICAgICAgICAgIHBsYWNlbWVudD0iYXV0byIKICAgICAgICAgICAgICAgIGNvbnRhaW5lcj0ibXktY29udGFpbmVyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSAjdGl0bGU+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPkV4cG9ydCBUYWJsZTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgIDxiLWZvcm0tZ3JvdXAKICAgICAgICAgICAgICAgICAgICBsYWJlbD0iU2VhcmNoIEZpbHRlciIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxiLWZvcm0taW5wdXQKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InNlYXJjaFRlcm0iCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIgogICAgICAgICAgICAgICAgICAgICAgc2l6ZT0ic20iCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9iLWZvcm0tZ3JvdXA+CgogICAgICAgICAgICAgICAgICA8Yi1mb3JtLWdyb3VwCiAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlJlY29yZHMgTGltaXQiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8Yi1mb3JtLWlucHV0CiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJleHBvcnRMaW1pdCIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iIgogICAgICAgICAgICAgICAgICAgICAgc2l6ZT0ic20iCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9iLWZvcm0tZ3JvdXA+CgogICAgICAgICAgICAgICAgICA8IS0tIGJ1dHRvbiAtLT4KICAgICAgICAgICAgICAgICAgPGItcm93PgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSI2Ij4KICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICB2LXJpcHBsZS40MDA9IidyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTUpJyIKICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT0ic20iCiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9ImRhbmdlciIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1yLTEiCiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ib25DbG9zZSIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGZlYXRoZXItaWNvbiBpY29uPSJYSWNvbiIgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KCiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjYiPgogICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgIHYtcmlwcGxlLjQwMD0iJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNSknIgogICAgICAgICAgICAgICAgICAgICAgICBzaXplPSJzbSIKICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgOmhyZWY9IicvYXBpL2NsaWVudENzdj9zZWFyY2hUZXJtPScrIHNlYXJjaFRlcm0rJyAmYW1wO2xpbWl0PScrZXhwb3J0TGltaXQiCiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8ZmVhdGhlci1pY29uIGljb249IkRvd25sb2FkSWNvbiIgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvYi1wb3BvdmVyPgoKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgPC9iLWlucHV0LWdyb3VwLXByZXBlbmQ+CgogICAgICAgICAgPGItaW5wdXQtZ3JvdXAtcHJlcGVuZD4KCiAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgIHYtcmlwcGxlLjQwMD0iJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNSknIgogICAgICAgICAgICAgIHZhcmlhbnQ9InByaW1hcnkiCgogICAgICAgICAgICAgIDp0bz0ieyBuYW1lOiAnY3JlYXRlLW5ldy1jbGllbnQnfSIKCiAgICAgICAgICAgICAgdGl0bGU9IkFkZCBDbGllbnQiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICBBREQrCiAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICA8L2ItaW5wdXQtZ3JvdXAtcHJlcGVuZD4KCiAgICAgICAgPC9iLWlucHV0LWdyb3VwPgoKICAgICAgPC9kaXY+CiAgICA8L2ItZm9ybS1ncm91cD4KICA8L2Rpdj4KCiAgPGItdGFibGUKICAgIDppdGVtcz0iaXRlbXMiCiAgICA6ZmllbGRzPSJmaWVsZHMiCiAgICByZXNwb25zaXZlCiAgICBjbGFzcz0ibWItMCBiZy13aGl0ZSIKICAgIDpidXN5PSJpc0J1c3kiCiAgPgogICAgPHRlbXBsYXRlICNjZWxsKE9wdGlvbnMpPSJyb3ciPgogICAgICA8IS0tIDxkaXY+IC0tPgogICAgICAgIDwhLS0gQXMgYHJvdy5zaG93RGV0YWlsc2AgaXMgb25lLXdheSwgd2UgY2FsbCB0aGUgdG9nZ2xlRGV0YWlscyBmdW5jdGlvbiBvbiBAY2hhbmdlIC0tPgogICAgICAgIDwhLS0gPGItZm9ybS1jaGVja2JveAogICAgICAgICAgdi1tb2RlbD0icm93LmRldGFpbHNTaG93aW5nIgogICAgICAgICAgQGNoYW5nZT0icm93LnRvZ2dsZURldGFpbHMiCiAgICAgICAgPgogICAgICAgICAge3sgcm93LmRldGFpbHNTaG93aW5nID8gJ0hpZGUnIDogJ1ZpZXcgRGV0YWlscycgfX0KICAgICAgICA8L2ItZm9ybS1jaGVja2JveD4KICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LXN0YXJ0Ij4KICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICB2LWlmPSIkYWJpbGl0eS5jYW4oJ2VkaXQnLCAnY2xpZW50JykiCiAgICAgICAgICAgIHYtcmlwcGxlLjQwMD0iJ3JnYmEoNDAsIDE5OSwgMTExLCAwLjE1KSciCiAgICAgICAgICAgIDp0bz0ieyBuYW1lOiAnZWRpdC1jbGllbnQnLCBwYXJhbXM6IHsgY2xpZW50X2NvZGU6IHJvdy5pdGVtLmNsaWVudF9jb2RlIH19IgogICAgICAgICAgICB2YXJpYW50PSJmbGF0LXN1Y2Nlc3MiCiAgICAgICAgICAgIGNsYXNzPSJidG4taWNvbiByb3VuZGVkLWNpcmNsZSIKICAgICAgICAgID4KICAgICAgICAgICAgPGZlYXRoZXItaWNvbiBpY29uPSJFZGl0SWNvbiIgLz4KICAgICAgICAgIDwvYi1idXR0b24+CgogICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgIHYtaWY9IiRhYmlsaXR5LmNhbignZGVsZXRlJywgJ2NsaWVudCcpIgogICAgICAgICAgICB2LXJpcHBsZS40MDA9IidyZ2JhKDQwLCAxOTksIDExMSwgMC4xNSknIgogICAgICAgICAgICB2YXJpYW50PSJmbGF0LWRhbmdlciIKICAgICAgICAgICAgY2xhc3M9ImJ0bi1pY29uIHJvdW5kZWQtY2lyY2xlIgogICAgICAgICAgICBAY2xpY2s9ImRlbGV0ZUVtcGxveWVlKHJvdy5pdGVtLmNsaWVudF9jb2RlKSIKICAgICAgICAgID4KICAgICAgICAgICAgPGZlYXRoZXItaWNvbiBpY29uPSJUcmFzaDJJY29uIiAvPgogICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICA8L2Rpdj4gLS0+CiAgICAgIDwhLS0gPC9kaXY+IC0tPgoKCgogICAgICA8ZGl2PgogICAgICA8IS0tIEFzIGByb3cuc2hvd0RldGFpbHNgIGlzIG9uZS13YXksIHdlIGNhbGwgdGhlIHRvZ2dsZURldGFpbHMgZnVuY3Rpb24gb24gQGNoYW5nZSAtLT4KICAgICAgPGItZm9ybS1ncm91cD4KICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIHctZml0LWNvbnRlbnQiPgogICAgICAgICAgPGItaW5wdXQtZ3JvdXA+CiAgICAgICAgICAgIDxiLWlucHV0LWdyb3VwLXByZXBlbmQ+CiAgICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICBzaXplPSJzbSIKICAgICAgICAgICAgICAgIHYtcmlwcGxlLjQwMD0iJ3JnYmEoMTEzLCAxMDIsIDI0MCwgMC4xNSknIgogICAgICAgICAgICAgICAgdmFyaWFudD0ib3V0bGluZS1wcmltYXJ5IgogICAgICAgICAgICAgICAgdi1iaW5kOmNsYXNzPSJyb3cuZGV0YWlsc1Nob3dpbmcgPyAnYWN0aXZlJyA6ICcnIgogICAgICAgICAgICAgICAgQGNsaWNrPSJyb3cudG9nZ2xlRGV0YWlscyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8ZmVhdGhlci1pY29uCiAgICAgICAgICAgICAgICAgIGljb249IkNoZXZyb25VcEljb24iCiAgICAgICAgICAgICAgICAgIHYtaWY9InJvdy5kZXRhaWxzU2hvd2luZyIKICAgICAgICAgICAgICAgIC8+CgogICAgICAgICAgICAgICAgPGZlYXRoZXItaWNvbiBpY29uPSJDaGV2cm9uRG93bkljb24iIHYtZWxzZSAvPgogICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgIDwvYi1pbnB1dC1ncm91cC1wcmVwZW5kPgoKICAgICAgICAgICAgPGItaW5wdXQtZ3JvdXAtYXBwZW5kIHYtaWY9IiRhYmlsaXR5LmNhbignZWRpdCcsICdjbGllbnQnKSI+CiAgICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICBzaXplPSJzbSIKICAgICAgICAgICAgICAgIDp0bz0ieyBuYW1lOiAnZWRpdC1jbGllbnQnLCBwYXJhbXM6IHtjbGllbnRfY29kZTogcm93Lml0ZW0uY2xpZW50X2NvZGUgfSB9IgogICAgICAgICAgICAgICAgdi1yaXBwbGUuNDAwPSIncmdiYSg0MCwgMTk5LCAxMTEsIDAuMTUpJyIKICAgICAgICAgICAgICAgIHZhcmlhbnQ9Im91dGxpbmUtcHJpbWFyeSB0ZXh0LXN1Y2Nlc3MiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGZlYXRoZXItaWNvbiBpY29uPSJFZGl0SWNvbiIgLz4KICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICA8L2ItaW5wdXQtZ3JvdXAtYXBwZW5kPgogICAgICAgICAgICA8Yi1pbnB1dC1ncm91cC1hcHBlbmQKICAgICAgICAgICAgICB2LWlmPSIkYWJpbGl0eS5jYW4oJ2RlbGV0ZScsICdjbGllbnQnKSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgc2l6ZT0ic20iCiAgICAgICAgICAgICAgICB2LXJpcHBsZS40MDA9IidyZ2JhKDQwLCAxOTksIDExMSwgMC4xNSknIgogICAgICAgICAgICAgICAgdmFyaWFudD0ib3V0bGluZS1wcmltYXJ5IHRleHQtZGFuZ2VyIgogICAgICAgICAgICAgICAgQGNsaWNrPSJkZWxldGVFbXBsb3llZShyb3cuaXRlbS5jbGllbnRfY29kZSkiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGZlYXRoZXItaWNvbiBpY29uPSJUcmFzaDJJY29uIiAvPgogICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgIDwvYi1pbnB1dC1ncm91cC1hcHBlbmQ+CiAgICAgICAgICA8L2ItaW5wdXQtZ3JvdXA+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvYi1mb3JtLWdyb3VwPiAgCiAgICAgIDwvZGl2PgogICAgPC90ZW1wbGF0ZT4KCiAgICA8IS0tIGZ1bGwgZGV0YWlsIG9uIGNsaWNrIC0tPgogICAgPHRlbXBsYXRlICNyb3ctZGV0YWlscz0icm93Ij4KICAgICAgPGItY2FyZCBuby1ib2R5PgogICAgICAgIDxiLXJvdz4KICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiI+CiAgICAgICAgICAgIDxiLXRhYnMKICAgICAgICAgICAgICBwaWxscwogICAgICAgICAgICAgIGNhcmQKICAgICAgICAgICAgICBob3Jpem9udGFsCiAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgPGItdGFiIHRpdGxlPSJDbGllbnQgRGV0YWlscyI+CiAgICAgICAgICAgICAgICA8Yi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0iYm9yZGVyLWJvdHRvbSAiPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIyIj4KICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Q2xpZW50IE5hbWU8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMCI+CiAgICAgICAgICAgICAgICAgICAgICB7eyByb3cuaXRlbS5jbGllbnRfbmFtZSB9fQogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0iYm9yZGVyLWJvdHRvbSAiPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIyIj4KICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Q2xpZW50IE5hbWUgKGFyKTwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgIHt7IHJvdy5pdGVtLmNsaWVudF9uYW1lX2FyIH19CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJib3JkZXItYm90dG9tICI+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjIiPgogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5DbGllbnQgQ29kZTwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgIHt7IHJvdy5pdGVtLmNsaWVudF9jb2RlIH19CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJib3JkZXItYm90dG9tICI+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjIiPgogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5BZGRyZXNzPC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTAiPgogICAgICAgICAgICAgICAgICAgICAge3sgcm93Lml0ZW0uYWRkcmVzcyB9fQogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0iYm9yZGVyLWJvdHRvbSAiPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIyIj4KICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Q1IgTnVtYmVyPC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTAiPgogICAgICAgICAgICAgICAgICAgICAge3sgcm93Lml0ZW0uY3Jfbm8gfX0KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9ImJvcmRlci1ib3R0b20gIj4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMiI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlZBVCBOdW1iZXI8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMCI+CiAgICAgICAgICAgICAgICAgICAgICB7eyByb3cuaXRlbS52YXRfbm8gfX0KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9ImJvcmRlci1ib3R0b20gICI+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjIiPgogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5DUiBBdHRhY2htZW50PC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImlzUGRmKHJvdy5pdGVtLmNyKSIKICAgICAgICAgICAgICAgICAgICAgIGNvbHM9IjEwIgogICAgICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICA6aHJlZj0icm93Lml0ZW0uY3IiCiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgPlZpZXcgZmlsZTwvYT4KCiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZQogICAgICAgICAgICAgICAgICAgICAgY29scz0iMTAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGVubGFyZ2VhYmxlLWltYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9InJvdy5pdGVtLmNyIgogICAgICAgICAgICAgICAgICAgICAgICA6c3JjX2xhcmdlPSJyb3cuaXRlbS5jciIKICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX2R1cmF0aW9uPSI2MDAiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXgtaGVpZ2h0OiA4MHB4OyIKICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWwKICAgICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSJyb3cuaXRlbS5jciIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvZW5sYXJnZWFibGUtaW1hZ2U+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJib3JkZXItYm90dG9tICAiPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIyIj4KICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+VkFUIEF0dGFjaG1lbnQ8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbAogICAgICAgICAgICAgICAgICAgICAgdi1pZj0iaXNQZGYocm93Lml0ZW0udmF0X2NlcnQpIgogICAgICAgICAgICAgICAgICAgICAgY29scz0iMTAiCiAgICAgICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgIDpocmVmPSJyb3cuaXRlbS52YXRfY2VydCIKICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICA+VmlldyBmaWxlPC9hPgoKICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbAogICAgICAgICAgICAgICAgICAgICAgdi1lbHNlCiAgICAgICAgICAgICAgICAgICAgICBjb2xzPSIxMCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8ZW5sYXJnZWFibGUtaW1hZ2UKICAgICAgICAgICAgICAgICAgICAgICAgOnNyYz0icm93Lml0ZW0udmF0X2NlcnQiCiAgICAgICAgICAgICAgICAgICAgICAgIDpzcmNfbGFyZ2U9InJvdy5pdGVtLnZhdF9jZXJ0IgogICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fZHVyYXRpb249IjYwMCIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGItaW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1heC1oZWlnaHQ6IDgwcHg7IgogICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbAogICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9InJvdy5pdGVtLnZhdF9jZXJ0IgogICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgPC9lbmxhcmdlYWJsZS1pbWFnZT4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9ImJvcmRlci1ib3R0b20gIj4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMiI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkFKRUVSIExpY2Vuc2U8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMCI+CiAgICAgICAgICAgICAgICAgICAgICB7eyByb3cuaXRlbS5hamVlcl9saWNlbnNlIH19CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJib3JkZXItYm90dG9tICI+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjIiPgogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5EZXBhcnRtZW50PC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTAiPgogICAgICAgICAgICAgICAgICAgICAge3sgcm93Lml0ZW0uZGVwdF9lbiB9fQogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0iYm9yZGVyLWJvdHRvbSAiPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIyIj4KICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+RGVwYXJ0bWVudCAoYXIpPC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTAiPgogICAgICAgICAgICAgICAgICAgICAge3sgcm93Lml0ZW0uZGVwdF9hciB9fQogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CgogICAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9ImJvcmRlci1ib3R0b20gIj4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMiI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkNvbnRhY3QgTmFtZTwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgIHt7IHJvdy5pdGVtLmNvbnRhY3ROYW1lIH19CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJib3JkZXItYm90dG9tICI+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjIiPgogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5Db250YWN0IE51bWJlcjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgIHt7IHJvdy5pdGVtLmNvbnRhY3RObyB9fQogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CgogICAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9ImJvcmRlci1ib3R0b20gICI+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjIiPgogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5Db250cmFjdCBGaWxlPC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICAgIHYtaWY9ImlzUGRmKHJvdy5pdGVtLmNvbnRyYWN0KSIKICAgICAgICAgICAgICAgICAgICAgIGNvbHM9IjEwIgogICAgICAgICAgICAgICAgICAgID4KCiAgICAgICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICA6aHJlZj0icm93Lml0ZW0uY29udHJhY3QiCiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgPlZpZXcgZmlsZTwvYT4KCiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZQogICAgICAgICAgICAgICAgICAgICAgY29scz0iMTAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGVubGFyZ2VhYmxlLWltYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9InJvdy5pdGVtLmNvbnRyYWN0IgogICAgICAgICAgICAgICAgICAgICAgICA6c3JjX2xhcmdlPSJyb3cuaXRlbS5jb250cmFjdCIKICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX2R1cmF0aW9uPSI2MDAiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXgtaGVpZ2h0OiA4MHB4OyIKICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWwKICAgICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSJyb3cuaXRlbS5jb250cmFjdCIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvZW5sYXJnZWFibGUtaW1hZ2U+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJib3JkZXItYm90dG9tICI+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjIiPgogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5Db250cmFjdCBUeXBlPC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTAiPgogICAgICAgICAgICAgICAgICAgICAge3sgcm93Lml0ZW0uY29udHJhY3RfdHlwZSB9fQogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0iYm9yZGVyLWJvdHRvbSAiPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIyIj4KICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Q29udHJhY3QgU3RhdHVzPC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTAiPgogICAgICAgICAgICAgICAgICAgICAge3sgcm93Lml0ZW0uY29udHJhY3Rfc3RhdHVzIH19CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJib3JkZXItYm90dG9tICI+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjIiPgogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5PcGVyYXRpb25hbCBTZXJ2aWNlczwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgIDxiLWxpc3QtZ3JvdXAgaG9yaXpvbnRhbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGItbGlzdC1ncm91cC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Im9uZVNraWxsIGluIHJvdy5pdGVtLmZhdF9kZXRhaWxzIgogICAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9Im9uZVNraWxsIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAge3sgb25lU2tpbGwgfX0KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWxpc3QtZ3JvdXAtaXRlbT4KCiAgICAgICAgICAgICAgICAgICAgICA8L2ItbGlzdC1ncm91cD4KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9ImJvcmRlci1ib3R0b20gIj4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMiI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlByb2plY3QgU3RhcnQgRGF0ZTwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgIHt7IHJvdy5pdGVtLnN0YXJ0X2RhdGUgfCBtb21lbnQoIkREL01NL1lZWVkiKSB9fQogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0iYm9yZGVyLWJvdHRvbSAiPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIyIj4KICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+UHJvamVjdCBFbmQgRGF0ZTwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgIHt7IHJvdy5pdGVtLmVuZF9kYXRlIHwgbW9tZW50KCJERC9NTS9ZWVlZIikgfX0KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9ImJvcmRlci1ib3R0b20gIj4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMiI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPldvcmtpbmcgRGF5czwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgIHt7IHJvdy5pdGVtLmRheXNXZWVrIH19CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJib3JkZXItYm90dG9tICI+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjIiPgogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5Xb3JraW5nIEhvdXJzPC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTAiPgogICAgICAgICAgICAgICAgICAgICAge3sgcm93Lml0ZW0uaG91cnNEYXkgfX0KICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgPC9iLWNhcmQtdGV4dD4KICAgICAgICAgICAgICA8L2ItdGFiPgoKICAgICAgICAgICAgICA8Yi10YWIgdGl0bGU9IkNsaWVudCBTZXJ2aWNlcyI+CiAgICAgICAgICAgICAgICA8Yi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0iYm9yZGVyLWJvdHRvbSAiPgogICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgICA8Yi10YWJsZQogICAgICAgICAgICAgICAgICAgICAgICA6aXRlbXM9InJvdy5pdGVtLnNlcnZpY2VzIgogICAgICAgICAgICAgICAgICAgICAgICA6ZmllbGRzPSJzZXJ2aWNlRmllbGRzIgogICAgICAgICAgICAgICAgICAgICAgICBzdHJpcGVkCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmUKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1iLTAiCiAgICAgICAgICAgICAgICAgICAgICAgIDpidXN5PSJpc0J1c3kiCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3ctZW1wdHkKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlICNlbXB0eT0ic2NvcGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoND57eyBzY29wZS5lbXB0eVRleHQgfX08L2g0PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlICNjZWxsKHJhdGUpPSJkYXRhIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAge3sgTnVtYmVyKCBkYXRhLnZhbHVlKS50b0xvY2FsZVN0cmluZygpIH19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgICAgICAgPC9iLXRhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICA8L2ItY2FyZC10ZXh0PgogICAgICAgICAgICAgIDwvYi10YWI+CgogICAgICAgICAgICAgIDxiLXRhYiB0aXRsZT0iQ2xpZW50IExvY2F0aW9uIj4KICAgICAgICAgICAgICAgIDxiLWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJib3JkZXItYm90dG9tICI+CiAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgIDxiLXRhYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIDppdGVtcz0icm93Lml0ZW0ubG9jYXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgIDpmaWVsZHM9IkxvY2F0aW9uRmllbGRzIgogICAgICAgICAgICAgICAgICAgICAgICBzdHJpcGVkCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmUKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1iLTAiCiAgICAgICAgICAgICAgICAgICAgICAgIDpidXN5PSJpc0J1c3kiCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3ctZW1wdHkKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlICNlbXB0eT0ic2NvcGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoND57eyBzY29wZS5lbXB0eVRleHQgfX08L2g0PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlICNjZWxsKHJhdGUpPSJkYXRhIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAge3sgTnVtYmVyKCBkYXRhLnZhbHVlKS50b0xvY2FsZVN0cmluZygpIH19CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgICAgICAgPC9iLXRhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICA8L2ItY2FyZC10ZXh0PgogICAgICAgICAgICAgIDwvYi10YWI+CgogICAgICAgICAgICA8L2ItdGFicz4KICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgPC9iLXJvdz4KICAgICAgICA8Yi1yb3cgY2xhc3M9ImJvcmRlci1ib3R0b20gIj4KICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiIgY2xhc3M9InRleHQtcmlnaHQiPgogICAgICAgICAgICAgIDxzdHJvbmc+Q3JlYXRlZCBCeSA6IDwvc3Ryb25nPgogICAgICAgICAgICAgIHt7IHJvdy5pdGVtLmNyZWF0ZWRfYnkgfX0KICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgPC9iLXJvdz4KICAgICAgICA8Yi1yb3cgY2xhc3M9ImJvcmRlci1ib3R0b20gIiB2LWlmPSJyb3cuaXRlbS51cGRhdGVkX2J5Ij4KICAgICAgICAgIDxiLWNvbCBjb2xzPSIxMiIgY2xhc3M9InRleHQtcmlnaHQiPgogICAgICAgICAgICAgIDxzdHJvbmc+VXBkYXRlZCBCeSA6IDwvc3Ryb25nPgogICAgICAgICAgICAgIHt7IHJvdy5pdGVtLnVwZGF0ZWRfYnkgfX0KICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgPCEtLSA8Yi1idXR0b24KICAgICAgICAgICAgc2l6ZT0ic20iCiAgICAgICAgICAgIHZhcmlhbnQ9Im91dGxpbmUtc2Vjb25kYXJ5IgogICAgICAgICAgICBAY2xpY2s9InJvdy50b2dnbGVEZXRhaWxzIgogICAgICAgICAgPgogICAgICAgICAgICBIaWRlIERldGFpbHMKICAgICAgICAgIDwvYi1idXR0b24+IC0tPgogICAgICA8L2ItY2FyZD4KICAgIDwvdGVtcGxhdGU+CgogICAgPCEtLSA8dGVtcGxhdGUgI2NlbGwoaXFhbWEpPSJkYXRhIj4KICAgICAgICA8Yi1hdmF0YXIgOnNyYz0iZGF0YS52YWx1ZSIgLz4KICAgICAgPC90ZW1wbGF0ZT4gLS0+CgogICAgPHRlbXBsYXRlICNjZWxsKGNsaWVudF9uYW1lKT0iZGF0YSI+CgogICAgICB7eyBkYXRhLml0ZW0uY2xpZW50X25hbWUgfX0KICAgICAgPC9icj4KICAgICAge3sgZGF0YS5pdGVtLmNsaWVudF9uYW1lX2FyIH19CgogICAgPC90ZW1wbGF0ZT4KCiAgICA8dGVtcGxhdGUgI2NlbGwoY29udHJhY3Rfc3RhdHVzKT0iZGF0YSI+CiAgICAgIDxiLWJhZGdlCiAgICAgICAgcGlsbAogICAgICAgIDp2YXJpYW50PSJzdGF0dXNWYXJpYW50KGRhdGEudmFsdWUpIgogICAgICA+CiAgICAgICAge3sgZGF0YS52YWx1ZSB9fQogICAgICA8L2ItYmFkZ2U+CiAgICA8L3RlbXBsYXRlPgoKICAgIDx0ZW1wbGF0ZSAjY2VsbChwYXNzcG9ydCk9ImRhdGEiPgoKICAgICAgPGVubGFyZ2VhYmxlLWltYWdlCiAgICAgICAgOnNyYz0iZGF0YS52YWx1ZSIKICAgICAgICA6c3JjX2xhcmdlPSJkYXRhLnZhbHVlIgogICAgICAgIGFuaW1hdGlvbl9kdXJhdGlvbj0iNjAwIgogICAgICA+CiAgICAgICAgPGItaW1nCiAgICAgICAgICB0aHVtYm5haWwKICAgICAgICAgIDpzcmM9ImRhdGEudmFsdWUiCiAgICAgICAgLz4KICAgICAgPC9lbmxhcmdlYWJsZS1pbWFnZT4KICAgIDwvdGVtcGxhdGU+CgogICAgPHRlbXBsYXRlICNjZWxsKHBhc3Nwb3J0XzIpPSJkYXRhIj4KCiAgICAgIDxlbmxhcmdlYWJsZS1pbWFnZQogICAgICAgIDpzcmM9ImRhdGEudmFsdWUiCiAgICAgICAgOnNyY19sYXJnZT0iZGF0YS52YWx1ZSIKICAgICAgICBhbmltYXRpb25fZHVyYXRpb249IjYwMCIKICAgICAgPgogICAgICAgIDxiLWltZwogICAgICAgICAgdGh1bWJuYWlsCiAgICAgICAgICA6c3JjPSJkYXRhLnZhbHVlIgogICAgICAgIC8+CiAgICAgIDwvZW5sYXJnZWFibGUtaW1hZ2U+CiAgICA8L3RlbXBsYXRlPgoKICAgIDx0ZW1wbGF0ZSAjY2VsbChhamVlcik9ImRhdGEiPgoKICAgICAgPGVubGFyZ2VhYmxlLWltYWdlCiAgICAgICAgOnNyYz0iZGF0YS52YWx1ZSIKICAgICAgICA6c3JjX2xhcmdlPSJkYXRhLnZhbHVlIgogICAgICAgIGFuaW1hdGlvbl9kdXJhdGlvbj0iNjAwIgogICAgICA+CiAgICAgICAgPGItaW1nCiAgICAgICAgICB0aHVtYm5haWwKICAgICAgICAgIDpzcmM9ImRhdGEudmFsdWUiCiAgICAgICAgLz4KICAgICAgPC9lbmxhcmdlYWJsZS1pbWFnZT4KICAgIDwvdGVtcGxhdGU+CgogICAgPHRlbXBsYXRlICNjZWxsKGluc3VyYW5jZV9jYXJkKT0iZGF0YSI+CgogICAgICA8ZW5sYXJnZWFibGUtaW1hZ2UKICAgICAgICA6c3JjPSJkYXRhLnZhbHVlIgogICAgICAgIDpzcmNfbGFyZ2U9ImRhdGEudmFsdWUiCiAgICAgICAgYW5pbWF0aW9uX2R1cmF0aW9uPSI2MDAiCiAgICAgID4KICAgICAgICA8Yi1pbWcKICAgICAgICAgIHRodW1ibmFpbAogICAgICAgICAgOnNyYz0iZGF0YS52YWx1ZSIKICAgICAgICAvPgogICAgICA8L2VubGFyZ2VhYmxlLWltYWdlPgogICAgPC90ZW1wbGF0ZT4KCiAgICA8dGVtcGxhdGUgI3RhYmxlLWJ1c3k+CiAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIHRleHQtcHJpbWFyeSBteS0yIj4KICAgICAgICA8Yi1zcGlubmVyIGNsYXNzPSJhbGlnbi1taWRkbGUiIC8+CiAgICAgICAgPHN0cm9uZz5Mb2FkaW5nLi4uPC9zdHJvbmc+CiAgICAgIDwvZGl2PgogICAgPC90ZW1wbGF0ZT4KCiAgICA8IS0tIDx0ZW1wbGF0ZSAjY2VsbChzdGF0dXMpPSJkYXRhIj4KICAgICAgICA8Yi1iYWRnZSA6dmFyaWFudD0ic3RhdHVzWzFdW2RhdGEudmFsdWVdIj4KICAgICAgICAgIHt7IHN0YXR1c1swXVtkYXRhLnZhbHVlXSB9fQogICAgICAgIDwvYi1iYWRnZT4KICAgICAgPC90ZW1wbGF0ZT4gLS0+CiAgPC9iLXRhYmxlPgoKICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCI+CiAgICA8Yi1wYWdpbmF0aW9uCiAgICAgIHYtbW9kZWw9InBhZ2UiCiAgICAgIDp0b3RhbC1yb3dzPSJjb3VudCIKICAgICAgOnBlci1wYWdlPSJwYWdlU2l6ZSIKICAgICAgcGlsbHMKICAgICAgQGNoYW5nZT0iaGFuZGxlUGFnZUNoYW5nZSIKICAgIC8+CiAgPC9kaXY+CjwvZGl2PgoK"},null]}