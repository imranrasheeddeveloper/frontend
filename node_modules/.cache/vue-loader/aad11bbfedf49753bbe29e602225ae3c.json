{"remainingRequest":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\src\\views\\table\\bs-table\\callCenter\\listCallCenter.vue?vue&type=template&id=7f1277cb&","dependencies":[{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\src\\views\\table\\bs-table\\callCenter\\listCallCenter.vue","mtime":1659607990775},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658911406787},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1658911433727},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658911406787},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1658911433727}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}