{"remainingRequest":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\src\\views\\table\\bs-table\\documentManagement\\documentTableView.vue?vue&type=template&id=3e71f919&","dependencies":[{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\src\\views\\table\\bs-table\\documentManagement\\documentTableView.vue","mtime":1658909893000},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658911406787},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1658911433727},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658911406787},{"path":"C:\\xampp\\htdocs\\GulflamarERPSystem\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1658911433727}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}