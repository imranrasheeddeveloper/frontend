{"remainingRequest":"/Users/imranrasheed/Desktop/GulflamarERPSystem/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/imranrasheed/Desktop/GulflamarERPSystem/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/imranrasheed/Desktop/GulflamarERPSystem/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/imranrasheed/Desktop/GulflamarERPSystem/frontend/src/views/apps/email/Email.vue?vue&type=template&id=10417946&scoped=true&","dependencies":[{"path":"/Users/imranrasheed/Desktop/GulflamarERPSystem/frontend/src/views/apps/email/Email.vue","mtime":1658909892000},{"path":"/Users/imranrasheed/Desktop/GulflamarERPSystem/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1658911406000},{"path":"/Users/imranrasheed/Desktop/GulflamarERPSystem/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1658911432000},{"path":"/Users/imranrasheed/Desktop/GulflamarERPSystem/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1658911406000},{"path":"/Users/imranrasheed/Desktop/GulflamarERPSystem/frontend/node_modules/vue-loader/lib/index.js","mtime":1658911432000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}